from managers.calories_manager import count_callories
from managers.water_manger import count_water
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from middlewares.states import Form
from api.food_api import get_calories
from user.user import user

log_food_router = Router()

@log_food_router.message(Command("log_food"))
async def message_handler(
            message: types.Message,
            command: CommandObject
    ):
    if command.args is None:
        await message.anser(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    
    try:
        food, grams = command.args.split(",", maxsplit=1)
        grams = float(grams)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_food <food>, <grams>"
        )
        return

    try:
        if grams <= 0:
            raise ValueError

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Yandex GPT
        answer = await get_calories(food, grams)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if answer == "error":
            raise Exception("API error")
        
        if answer.isdigit():
            calories = int(answer)
            if calories == 0:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–ª—é–¥–∞"
            else:
                message_date = message.date
                formatted_time = message_date.strftime("%H:%M:%S")

                delta = await user.add_calories(calories, formatted_time)
                if delta < 0:
                    delta_text = f"–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –Ω–∞ {abs(delta)} –∫–∞–ª–æ—Ä–∏–π\n"
                else:
                    delta_text = f"–û—Å—Ç–∞–ª–æ—Å—å {delta} –∫–∞–ª–æ—Ä–∏–π\n"
                                                
                text = (
                    f"üçΩ {food}\n"
                    f"üìä {grams} –≥—Ä–∞–º–º\n"
                    f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ~{calories} –∫–∫–∞–ª\n\n"
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
                    f"{delta_text}"
                )
        else:
            text = "‚ö† –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"

    except ValueError:
        text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/log_food –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, 200"

    await message.answer(text, parse_mode="HTML")

@log_food_router.message(Command("log_water"))
async def message_handler(
            message: types.Message,
            command: CommandObject
    ):
    if command.args is None:
        await message.anser(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    
    try:
        ml = command.args.split(" ")
        ml = float(ml)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_water <ml>"
        )
        return

    try:
        if ml <= 0:
            raise ValueError

        message_date = message.date
        formatted_time = message_date.strftime("%H:%M:%S")

        delta = await user.add_water(ml, formatted_time)

        if delta < 0:
            delta_text = f"–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –Ω–æ—Ä–º—É –≤–æ–¥—ã –Ω–∞ {abs(delta)} ml\n"
        else:
            delta_text = f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {delta} ml\n"

        text = (
            f"ü•§ –í—ã–ø–∏—Ç–æ {ml} –≤–æ–¥—ã\n\n"
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
            f"{delta_text}"
        )

    except ValueError:
        text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/log_water 500"

    await message.answer(text, parse_mode="HTML")


def setup_callories_handlers(dp):
    dp.include_router(log_food_router)