from aiogram import Router, types
from aiogram.filters import Command
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker
from datetime import datetime, time
import io
from user.user import user

plot_router = Router()

async def create_daily_plot(logs, daily_target):
    if not logs:
        return None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç—ã datetime –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    times = []
    cumulative = 0
    cumulative_calories = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    sorted_items = sorted(logs.items(), key=lambda x: x[0])
    
    for time_str, cal in sorted_items:
        times.append(datetime.combine(datetime.today(), time_str))
        cumulative = cal
        cumulative_calories.append(cumulative)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    
    # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    plt.plot(times, cumulative_calories, 'o-', label='–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∏–µ')
    
    # –õ–∏–Ω–∏—è –Ω–æ—Ä–º—ã
    plt.axhline(y=daily_target, color='r', linestyle='--', label='–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%H:%M:%S"))
    plt.gca().xaxis.set_major_locator(matplotlib.ticker.AutoLocator())
    plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å')
    plt.ylabel('–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

@plot_router.message(Command("progress_food"))
async def show_daily_progress(message: types.Message):
    data = await user.get_info()
    daily_calories = data['target_calories']
    cal_logs = data['food_logs']
    if not cal_logs:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏")
        return
    
    plot_buf = await create_daily_plot(cal_logs, daily_calories)
    total = sum(cal_logs.values())
    
    caption = (
        f"üçé –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"‚Ä¢ –°—ä–µ–¥–µ–Ω–æ: {total}/{daily_calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {daily_calories - total} –∫–∫–∞–ª\n"
    )
    
    await message.answer_photo(
        photo=types.BufferedInputFile(plot_buf.getvalue(), filename="calories.png"),
        caption=caption
    )

@plot_router.message(Command("progress_water"))
async def show_daily_progress(message: types.Message):
    data = await user.get_info()
    daily_water = data['target_water']
    cal_logs = data['water_logs']
    if not cal_logs:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏–ª–∏")
        return
    
    plot_buf = await create_daily_plot(cal_logs, daily_water)
    total = sum(cal_logs.values())
    
    caption = (
        f"ü•§ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"‚Ä¢ –í—ã–ø–∏—Ç–æ: {total}/{daily_water} ml\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {daily_water - total} ml\n"
        f"‚Ä¢ –ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: {len(cal_logs)}"
    )
    
    await message.answer_photo(
        photo=types.BufferedInputFile(plot_buf.getvalue(), filename="water.png"),
        caption=caption
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_plot_handlers(dp):
    dp.include_router(plot_router)