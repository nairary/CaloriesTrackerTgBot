from managers.calories_manager import count_callories
from managers.water_manger import count_water
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from middlewares.states import Form
from api.food_api import get_workout
from user.user import user

log_workout_router = Router()

@log_workout_router.message(Command("log_workout"))
async def message_handler(
            message: types.Message,
            command: CommandObject
    ):
    if command.args is None:
        await message.anser(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    
    try:
        workout, workout_time = command.args.split(",", maxsplit=1)
        workout_time = float(workout_time)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_workout <workout>, <minutes>"
        )
        return

    try:
        if workout_time <= 0:
            raise ValueError

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Yandex GPT
        answer = await get_workout(workout, workout_time)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if answer == "error":
            raise Exception("API error")
        
        if answer.isdigit():
            calories = int(answer)
            if calories == 0:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Å–∂–∏–≥–∞–µ—Ç —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
            else:
                message_date = message.date
                formatted_time = message_date.strftime("%H:%M:%S")

                print(f"{workout_time} % 30 = {workout_time % 30}")
                water_to_drink = 500 * workout_time % 30
                print(f"500 * {workout_time} % 30 = {water_to_drink}")

                await user.remove_calories(calories, formatted_time)
                await user.add_water_for_workout(workout_time, formatted_time)
                                                
                text = (
                    f"ü§∏üèª‚Äç‚ôÇÔ∏è {workout} - {workout_time} –º–∏–Ω—É—Ç\n\n"
                    f"üî• –°–æ–∂–≥–ª–∏: ~{calories} –∫–∫–∞–ª\n"
                    f"üö∞ –í—ã–ø–µ–π—Ç–µ {water_to_drink} –º–ª –≤–æ–¥—ã\n"
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
                )
        else:
            text = "‚ö† –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"

    except ValueError:
        text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/log_workout <workout>, <minutes>"

    await message.answer(text, parse_mode="HTML")

def setup_workout_handlers(dp):
    dp.include_router(log_workout_router)